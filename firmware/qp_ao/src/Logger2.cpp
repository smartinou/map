//.$file${Logging::../src::Logger2.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: PFPP.qm
// File:  ${Logging::../src::Logger2.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
// All your changes in these sections will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${Logging::../src::Logger2.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// *******************************************************************************
//
// Project: Logging.
//
// Module: Logger.
//
// *******************************************************************************

//! \file
//! \brief Logger class.
//! \ingroup qp_ao

// ******************************************************************************
//
//        Copyright (c) 2018-2022, Pleora Technologies, All rights reserved.
//
// ******************************************************************************

// ******************************************************************************
//                              INCLUDE FILES
// ******************************************************************************

// This module.
#include "Logger2.h"

// ******************************************************************************
//                       DEFINED CONSTANTS AND MACROS
// ******************************************************************************

// ******************************************************************************
//                         TYPEDEFS AND STRUCTURES
// ******************************************************************************

// ******************************************************************************
//                            FUNCTION PROTOTYPES
// ******************************************************************************

// ******************************************************************************
//                             GLOBAL VARIABLES
// ******************************************************************************

// ******************************************************************************
//                            EXPORTED FUNCTIONS
// ******************************************************************************

auto Logger::AddCategory(
    std::string const &aCategoryStr,
    QP::QSignal const aEventSignal,
    LogLevel::prio const aMaxLevel
) noexcept -> bool
{
    auto const lPair = std::make_pair(aEventSignal, aMaxLevel);
    auto const lResult = mCategories.insert_or_assign(aCategoryStr, lPair);

    return lResult.second;
}


void Logger::AddSink(std::string const &aCategoryStr, QP::QActive const * const aAO) noexcept {
    // Make the AO listener subscribe to the category.
    auto const lCategory = GetCategory(aCategoryStr);
    if (lCategory) {
        [[maybe_unused]] auto const [lEventSig, lPrio] = lCategory.value();
        aAO->subscribe(lEventSig);
    }
}

// ******************************************************************************
//                              LOCAL FUNCTIONS
// ******************************************************************************

auto Logger::GetCategory(std::string const &aCategoryStr) noexcept
    -> std::optional<CategoryEntry>
{
    auto const lSearch = mCategories.find(aCategoryStr);
    if (lSearch != mCategories.cend()) {
        return lSearch->second;
    }

    return std::nullopt;
}

// ******************************************************************************
//                                END OF FILE
// ******************************************************************************
