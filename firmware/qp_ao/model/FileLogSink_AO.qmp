<?xml version="1.0" encoding="UTF-8"?>
<package name="FileLogSink_AO" stereotype="0x02">
 <class name="FileLogSink_AO" superclass="qpcpp::QActive">
  <documentation>Main state machine for SDC log sink.</documentation>
  <attribute name="mTimer" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
   <documentation>Timer for flushing queue of log events.</documentation>
  </attribute>
  <attribute name="mSyncLogLevel" type="LogLevel_t" visibility="0x02" properties="0x00">
   <documentation>Log level threshold/filter.</documentation>
  </attribute>
  <attribute name="mBufLogLevel" type="LogLevel_t" visibility="0x02" properties="0x00">
   <documentation>The log level required to write the log entry to the file.
The file is sync'ed right away.</documentation>
  </attribute>
  <attribute name="mSyncTimerTicks" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
   <documentation>Sync timer ticks.</documentation>
  </attribute>
  <attribute name="mFile" type="FIL" visibility="0x02" properties="0x00">
   <documentation>The log file.</documentation>
  </attribute>
  <attribute name="mDate" type="Date" visibility="0x02" properties="0x00">
   <documentation>Local copy of current date.</documentation>
  </attribute>
  <attribute name="mTime" type="Time" visibility="0x02" properties="0x00">
   <documentation>Local copy of current time.</documentation>
  </attribute>
  <attribute name="mWrErr" type="unsigned int" visibility="0x02" properties="0x00">
   <documentation>Number of write errors.  </documentation>
  </attribute>
  <attribute name="mLineOverflow" type="unsigned int" visibility="0x02" properties="0x00">
   <documentation>Number of lines that overflowed from allowed max char per line.</documentation>
  </attribute>
  <operation name="FileLogSink_AO" type="" visibility="0x00" properties="0x00">
   <documentation>Ctor.</documentation>
   <code>  : QActive(Q_STATE_CAST(&amp;FileLogSink_AO::initial))
  , mTimer(this, LOG_TIMER_SIG, 0U)
  , mSyncLogLevel(PRI_CRIT)
  , mBufLogLevel(PRI_INFO)
  , mSyncTimerTicks(0)
  , mDate()
  , mTime()
  , mWrErr(0)
  , mLineOverflow(0)

// Ctor body.</code>
  </operation>
  <operation name="~FileLogSink_AO" type="" visibility="0x00" properties="0x00">
   <documentation>Dtor.</documentation>
   <code>// Dtor body.</code>
  </operation>
  <operation name="SetSyncLogLevel" type="void" visibility="0x00" properties="0x00">
   <documentation>Sets the new log level threshold to filter log events.</documentation>
   <parameter name="aLogLevelThreshold" type="LogLevel_t"/>
   <code>mSyncLogLevel = aLogLevelThreshold;</code>
  </operation>
  <operation name="SetBufLogLevel" type="void" visibility="0x00" properties="0x00">
   <documentation>Sets the new log level threshold to filter log events.</documentation>
   <parameter name="aLogLevelThreshold" type="LogLevel_t"/>
  </operation>
  <operation name="WrEvt" type="void" visibility="0x02" properties="0x00">
   <documentation>Common function to write event into file buffer.</documentation>
   <parameter name="aLogEvt" type="LogEvt const &amp;"/>
   <code>char lTmpStr[64];
int lLen = f_printf(
      &amp;mFile,
      &quot;%s @%s: %s in file %s, function %s at line %d. %s::%s\n&quot;,
      DateHelper::ToStr(mDate, &amp;lTmpStr[0]),
      TimeHelper::ToStr(mTime, &amp;lTmpStr[0]),
      LogLevel::ToStr(aLogEvt.mLogLevel),
      aLogEvt.mFileStr,
      aLogEvt.mFunctionStr,
      aLogEvt.mLine,
      aLogEvt.mCategoryStr,
      aLogEvt.mMsgStr
);

// Do nothing with Len for now.
(void)lLen;</code>
  </operation>
  <statechart properties="0x02">
   <initial target="../1">
    <action brief="OpenFile();">// At this stage, the FS must be initialized.
FRESULT lResult = f_open(&amp;mFile, &quot;Log.txt&quot;, FA_OPEN_APPEND | FA_WRITE | FA_READ);
if (FR_OK != lResult) {
  // Error.
}
</action>
    <initial_glyph conn="8,6,5,0,6,4">
     <action box="0,-2,14,4"/>
    </initial_glyph>
   </initial>
   <state name="Running">
    <documentation>Main running state.</documentation>
    <entry brief="TimerStart();">mTimer.armX(mSyncTimerTicks, mSyncTimerTicks);</entry>
    <exit brief="TimerStop(); CloseFile();">mTimer.disarm();
f_close(&amp;mFile);</exit>
    <tran trig="LOG_TIMER">
     <action brief="SyncFile();">f_sync(&amp;mFile);</action>
     <tran_glyph conn="8,22,3,-1,50">
      <action box="0,-3,36,3"/>
     </tran_glyph>
    </tran>
    <tran trig="LOG_EVT">
     <action brief="ParseEvt();">LogEvt const * const lLogEvt = static_cast&lt;LogEvt const * const&gt;(e);</action>
     <choice>
      <guard brief="Level &gt;= SyncThreshold">lLogEvt-&gt;mLogLevel &gt;= mSyncLogLevel</guard>
      <action brief="WriteEvt(); SyncFile();">WrEvt(*lLogEvt);
f_sync(&amp;mFile);</action>
      <choice_glyph conn="30,30,5,-1,54">
       <action box="1,-3,46,4"/>
      </choice_glyph>
     </choice>
     <choice>
      <guard brief="Level &gt;= BufThreshold">lLogEvt-&gt;mLogLevel &gt;= mBufLogLevel</guard>
      <action brief="WriteEvt();">WrEvt(*lLogEvt);</action>
      <choice_glyph conn="30,30,4,-1,8,54">
       <action box="1,5,50,3"/>
      </choice_glyph>
     </choice>
     <choice>
      <guard brief="else"/>
      <action brief="DiscardEvt();"/>
      <choice_glyph conn="30,30,4,-1,16,54">
       <action box="1,13,26,3"/>
      </choice_glyph>
     </choice>
     <tran_glyph conn="8,30,3,-1,22">
      <action box="0,-3,27,4"/>
     </tran_glyph>
    </tran>
    <tran trig="RTCC_TIME_TICK_ALARM">
     <action brief="StoreDate();">RTCC::Event::TimeAndDate const * const lEvt = reinterpret_cast&lt;RTCC::Event::TimeAndDate const * const&gt;(e);

mTime = lEvt-&gt;mTime;</action>
     <choice>
      <guard brief="NewMonth">// Check if new month.
mDate != lEvt-&gt;mDate</guard>
      <action brief="OpenNewLogFile();">mDate = lEvt-&gt;mDate;
// Create a new log file.</action>
      <choice_glyph conn="38,52,5,-1,46">
       <action box="1,-3,41,3"/>
      </choice_glyph>
     </choice>
     <choice>
      <guard brief="else"/>
      <action brief="DoNothing();"/>
      <choice_glyph conn="38,52,4,-1,8,46">
       <action box="1,5,27,4"/>
      </choice_glyph>
     </choice>
     <tran_glyph conn="8,52,3,-1,30">
      <action box="0,-3,27,5"/>
     </tran_glyph>
    </tran>
    <state_glyph node="8,10,84,54">
     <entry box="1,2,15,3"/>
     <exit box="1,5,26,3"/>
    </state_glyph>
   </state>
   <state_diagram size="96,68"/>
  </statechart>
 </class>
</package>
