<?xml version="1.0" encoding="UTF-8"?>
<package name="Display" stereotype="0x04" namespace="Display::">
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="Mgr_AO" superclass="qpcpp::QActive">
   <documentation>The manager AO of the display.</documentation>
   <attribute name="mDisplayTimer" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>Timer event object.</documentation>
   </attribute>
   <attribute name="mLCD" type="ILCD &amp;" visibility="0x02" properties="0x00">
    <documentation>Reference to LCD interface-like object.</documentation>
   </attribute>
   <attribute name="mIsOn" type="bool" visibility="0x02" properties="0x00">
    <documentation>Current on/off state of the display.</documentation>
   </attribute>
   <attribute name="mOnTime" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Time to light the display when turned on.</documentation>
   </attribute>
   <operation name="Mgr_AO" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.</documentation>
    <parameter name="aLCD" type="ILCD &amp;"/>
    <code>    : QP::QActive(Q_STATE_CAST(&amp;Mgr_AO::initial))
    , mDisplayTimer(this, DISPLAY_TIMEOUT_SIG, 0U)
    , mLCD(aLCD)
    , mIsOn(false)
    , mOnTime(5)

// Ctor body.</code>
   </operation>
   <operation name="DisplayText" type="void" visibility="0x02" properties="0x00">
    <documentation>Displays text on screen.</documentation>
    <parameter name="e" type="QP::QEvt const * const"/>
    <code>Display::Event::DisplayText const * const lTextEvent = static_cast&lt;Display::Event::DisplayText const *&gt;(e);
mLCD.DrawStr(
    &amp;lTextEvent-&gt;mStr[0],
    {lTextEvent-&gt;mPosX, lTextEvent-&gt;mPosY},
    lTextEvent-&gt;mGreyLevel
);
if (lTextEvent-&gt;mIsDisplayOn) {
    TurnDisplayOn();
}</code>
   </operation>
   <operation name="Init" type="void" visibility="0x02" properties="0x00">
    <documentation>Init function.</documentation>
    <code>mLCD.Init();
mIsOn = false;</code>
   </operation>
   <operation name="TurnDisplayOn" type="void" visibility="0x02" properties="0x00">
    <documentation>Turns the display on.</documentation>
    <code>mDisplayTimer.rearm(mOnTime * BSP::TICKS_PER_SEC);
if (!mIsOn) {
    mIsOn = true;
    mLCD.DisplayOn();
}
</code>
   </operation>
   <operation name="TurnDisplayOff" type="void" visibility="0x02" properties="0x00">
    <documentation>Turns the display backlight off.</documentation>
    <code>if (mIsOn) {
    mIsOn = false;
    mLCD.DisplayOff();
}
</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="Init();">//DisplayMgrInitEvt const * const lInitEvtPtr = static_cast&lt;DisplayMgrInitEvt const *&gt;(e);
//mOnTime = lInitEvtPtr-&gt;mDisplayTime;
static_cast&lt;void&gt;(e);

// Subscribe to signals if any.
subscribe(DISPLAY_TEXT_SIG);
subscribe(DISPLAY_REFRESH_SIG);</action>
     <initial_glyph conn="4,4,5,0,6,6">
      <action box="0,-2,14,3"/>
     </initial_glyph>
    </initial>
    <state name="Running">
     <entry brief="InitDisplay();">Init();</entry>
     <exit brief="DisableTimer()">mDisplayTimer.disarm();
TurnDisplayOff();</exit>
     <tran trig="DISPLAY_TEXT">
      <action brief="DisplayText()">DisplayText(e);
</action>
      <tran_glyph conn="4,20,3,-1,34">
       <action box="0,-2,38,3"/>
      </tran_glyph>
     </tran>
     <tran trig="DISPLAY_TIMEOUT">
      <action brief="TurnOff()">TurnDisplayOff();</action>
      <tran_glyph conn="4,26,3,-1,34">
       <action box="0,-2,39,3"/>
      </tran_glyph>
     </tran>
     <tran trig="DISPLAY_REFRESH">
      <action brief="TurnOn();">TurnDisplayOn();</action>
      <tran_glyph conn="4,32,3,-1,34">
       <action box="0,-2,40,3"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <action brief="Stop();">// Requires QF_ACTIVE_STOP to be defined.
stop();</action>
      <tran_glyph conn="38,10,0,-1,-6,6">
       <action box="0,-6,10,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,10,40,26">
      <entry box="1,2,16,3"/>
      <exit box="1,5,19,3"/>
     </state_glyph>
    </state>
    <state_diagram size="48,40"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::">
  <class name="DisplayText" superclass="qpcpp::QEvt">
   <documentation>Event to display text.</documentation>
   <attribute name="mPosX" type="unsigned int const" visibility="0x00" properties="0x00">
    <documentation>Horizontal position ('x'-axis) start of the text to display.</documentation>
   </attribute>
   <attribute name="mPosY" type="unsigned int const" visibility="0x00" properties="0x00">
    <documentation>Vertical position ('y'-axis) start of the text to display.</documentation>
   </attribute>
   <attribute name="mGreyLevel" type="unsigned int const" visibility="0x00" properties="0x00">
    <documentation>Grey level of text to display.</documentation>
   </attribute>
   <attribute name="mStr[32+1]" type="char" visibility="0x00" properties="0x00">
    <documentation>The string to display.</documentation>
   </attribute>
   <attribute name="mIsDisplayOn" type="bool" visibility="0x00" properties="0x00">
    <documentation>Turns the display on if set to true.
Silently writes to display otherwise.</documentation>
   </attribute>
   <operation name="DisplayText" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aPosX" type="unsigned int const"/>
    <parameter name="aPosY" type="unsigned int const"/>
    <parameter name="aGreyLevel" type="unsigned int const"/>
    <parameter name="aStr" type="char const * const"/>
    <parameter name="aIsDisplayOn" type="bool"/>
    <code>    : QP::QEvt(aSig)
    , mPosX(aPosX)
    , mPosY(aPosY)
    , mGreyLevel(aGreyLevel)
    , mIsDisplayOn(aIsDisplayOn)

// Ctor body left empty.
strncpy(&amp;mStr[0], aStr, 32);</code>
   </operation>
  </class>
 </package>
 <directory name="../codegen">
  <file name="Display_AOs.h">
   <text>#include &lt;qpcpp.h&gt;

#include &lt;ILCD.h&gt;


$declare${Display::AOs::Mgr_AO}
</text>
  </file>
  <file name="Display_AOs.cpp">
   <text>#include &quot;BSP.h&quot;
#include &quot;Signals.h&quot;

#include &quot;Display_Events.h&quot;
#include &quot;Display_AOs.h&quot;


$define${Display::AOs::Mgr_AO}
</text>
  </file>
  <file name="Display_Events.h">
   <text>#include &lt;string.h&gt;

#include &lt;qpcpp.h&gt;


$declare${Display::Events}
</text>
  </file>
 </directory>
</package>
