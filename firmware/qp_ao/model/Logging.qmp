<?xml version="1.0" encoding="UTF-8"?>
<package name="Logging" stereotype="0x04" namespace="Logging::">
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="FileSink_AO" superclass="qpcpp::QActive">
   <documentation>Main state machine for SDC log sink.</documentation>
   <attribute name="mTimer" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>Timer for flushing queue of log events.</documentation>
   </attribute>
   <attribute name="mSyncLogLevel" type="LogLevel" visibility="0x02" properties="0x00">
    <documentation>Log level threshold/filter.</documentation>
   </attribute>
   <attribute name="mBufLogLevel" type="LogLevel" visibility="0x02" properties="0x00">
    <documentation>The log level required to write the log entry to the file.
The file is sync'ed right away.</documentation>
   </attribute>
   <attribute name="mSyncTimerTicks" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Sync timer ticks.</documentation>
   </attribute>
   <attribute name="mFile" type="FIL" visibility="0x02" properties="0x00">
    <documentation>The log file.</documentation>
   </attribute>
   <attribute name="mWrErr" type="unsigned int" visibility="0x02" properties="0x00">
    <documentation>Number of write errors.  </documentation>
   </attribute>
   <attribute name="mLineOverflow" type="unsigned int" visibility="0x02" properties="0x00">
    <documentation>Number of lines that overflowed from allowed max char per line.</documentation>
   </attribute>
   <attribute name="mCategories" type="std::unordered_set&lt;std::string&gt;" visibility="0x02" properties="0x00">
    <documentation>A list (as unordered set) of log categories.</documentation>
   </attribute>
   <operation name="FileSink_AO" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.</documentation>
    <parameter name="aSyncTimerTicks = 0" type="QP::QTimeEvtCtr"/>
    <code>  : QActive(Q_STATE_CAST(&amp;Logging::AO::FileSink_AO::initial))
  , mTimer(this, LOG_TIMER_SIG, 0U)
  , mSyncLogLevel(LogLevel::prio::CRITICAL)
  , mBufLogLevel(LogLevel::prio::INFO)
  , mSyncTimerTicks(aSyncTimerTicks)
  , mWrErr(0)
  , mLineOverflow(0)

// Ctor body.</code>
   </operation>
   <operation name="~FileSink_AO" type="" visibility="0x00" properties="0x00">
    <documentation>Dtor.</documentation>
    <code>// Dtor body.</code>
   </operation>
   <operation name="SetSyncLogLevel" type="void" visibility="0x00" properties="0x00">
    <documentation>Sets the new log level threshold to filter log events.</documentation>
    <parameter name="aLogLevelThreshold" type="LogLevel"/>
    <code>mSyncLogLevel = aLogLevelThreshold;</code>
   </operation>
   <operation name="SetBufLogLevel" type="void" visibility="0x00" properties="0x00">
    <documentation>Sets the new log level threshold to filter log events.</documentation>
    <parameter name="aLogLevelThreshold" type="LogLevel"/>
    <code>mBufLogLevel = aLogLevelThreshold;</code>
   </operation>
   <operation name="WrEvent" type="void" visibility="0x02" properties="0x00">
    <documentation>Common function to write event into file buffer.</documentation>
    <parameter name="aLogEvent" type="Logging::Event::LogEntry const &amp;"/>
    <code>char lDateStr[32] = {0};
DateHelper::ToStr(aLogEvent.mDate, &amp;lDateStr[0]);
char lTimeStr[32] = {0};
TimeHelper::ToStr(aLogEvent.mTime, &amp;lTimeStr[0]);
int lLen = f_printf(
    &amp;mFile,
    &quot;%s @%s: %s in file %s, function %s at line %d. %s::%s\n&quot;,
    &amp;lDateStr[0],
    &amp;lTimeStr[0],
    LogLevel::ToStr(aLogEvent.mLogLevel.GetLevel()),
    aLogEvent.mFileStr,
    aLogEvent.mFunctionStr,
    aLogEvent.mLine,
    aLogEvent.mCategoryStr,
    &amp;aLogEvent.mMsg[0]
);

// Do nothing with returned Len for now.
(void)lLen;</code>
   </operation>
   <statechart properties="0x02">
    <documentation>A logging sink AO.
Listen to logging signal of monitored log categories, and log events to file.</documentation>
    <initial target="../1">
     <action brief="OpenFile();">Logging::Event::Init const * const lInitEvent = static_cast&lt;Logging::Event::Init const * const&gt;(e);

// At this stage, the FS must be initialized.
FRESULT lResult = f_open(&amp;mFile, &quot;Log.txt&quot;, FA_OPEN_APPEND | FA_WRITE | FA_READ);
if (FR_OK == lResult) {
    // Seek to end of the file to append data.
    lResult = f_lseek(&amp;mFile, f_size(&amp;mFile));
    if (FR_OK == lResult) {
        mCategories = lInitEvent-&gt;mCategories;
        subscribe(LOG_EVENT_SIG);
    } else {
        f_close(&amp;mFile);
    }
}

if (FR_OK != lResult) {
    // Error. There's no use running this at all.
    QP::QEvt * const lEvent = Q_NEW(QP::QEvt, TERMINATE_SIG);
    POST(lEvent, this);
}
</action>
     <initial_glyph conn="4,4,5,0,6,6">
      <action box="0,-2,12,2"/>
     </initial_glyph>
    </initial>
    <state name="Running">
     <documentation>Main running state.</documentation>
     <entry brief="TimerStart();">if (mSyncTimerTicks) {
    mTimer.armX(mSyncTimerTicks, mSyncTimerTicks);
}</entry>
     <exit brief="TimerStop(); CloseFile();">mTimer.disarm();
f_close(&amp;mFile);</exit>
     <tran trig="LOG_TIMER">
      <action brief="SyncFile();">f_sync(&amp;mFile);</action>
      <tran_glyph conn="4,22,3,-1,22">
       <action box="0,-2,22,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LOG_EVENT">
      <action brief="ParseEvent();">Logging::Event::LogEntry const * const lLogEvent = static_cast&lt;Logging::Event::LogEntry const * const&gt;(e);

auto lCategory = mCategories.find(lLogEvent-&gt;mCategoryStr);</action>
      <choice>
       <guard brief="Level &gt;= SyncThreshold">(lLogEvent-&gt;mLogLevel &gt;= mSyncLogLevel) &amp;&amp; (lCategory != mCategories.end())</guard>
       <action brief="WriteEvent(); SyncFile();">WrEvent(*lLogEvent);
f_sync(&amp;mFile);</action>
       <choice_glyph conn="26,30,5,-1,38">
        <action box="1,-2,37,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="Level &gt;= BufThreshold">lLogEvent-&gt;mLogLevel &gt;= mBufLogLevel</guard>
       <action brief="WriteEvent();">WrEvent(*lLogEvent);</action>
       <choice_glyph conn="26,30,4,-1,6,38">
        <action box="1,4,37,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="else"/>
       <action brief="DiscardEvent();"/>
       <choice_glyph conn="26,30,4,-1,12,38">
        <action box="1,10,19,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,30,3,-1,22">
       <action box="0,-2,27,4"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_TIME_TICK_ALARM? 0">
      <action brief="StoreDate();">RTCC::Event::TimeAndDate const * const lEvt = reinterpret_cast&lt;RTCC::Event::TimeAndDate const * const&gt;(e);

mTime = lEvt-&gt;mTime;</action>
      <choice>
       <guard brief="NewMonth">// Check if new month.
mDate != lEvt-&gt;mDate</guard>
       <action brief="OpenNewLogFile();">mDate = lEvt-&gt;mDate;
// Create a new log file.</action>
       <choice_glyph conn="26,52,5,-1,30">
        <action box="1,-2,25,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="else"/>
       <action brief="DoNothing();"/>
       <choice_glyph conn="26,52,4,-1,6,30">
        <action box="1,4,17,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,52,3,-1,22">
       <action box="0,-2,27,5"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <action brief="Stop();">// Requires QF_ACTIVE_STOP to be defined.
stop();</action>
      <tran_glyph conn="62,10,0,-1,-6,6">
       <action box="0,-6,11,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,10,64,54">
      <entry box="1,2,15,2"/>
      <exit box="1,4,23,2"/>
     </state_glyph>
    </state>
    <state_diagram size="72,68"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::">
  <class name="LogEntry" superclass="qpcpp::QEvt">
   <documentation>Event used to generate a log entry.</documentation>
   <attribute name="mLogLevel" type="LogLevel" visibility="0x00" properties="0x00"/>
   <attribute name="mDate" type="Date const" visibility="0x00" properties="0x00">
    <documentation>Date of the event.</documentation>
   </attribute>
   <attribute name="mTime" type="Time const" visibility="0x00" properties="0x00">
    <documentation>The time of the event.</documentation>
   </attribute>
   <attribute name="mFileStr" type="char const * const" visibility="0x00" properties="0x00">
    <documentation>File string of the file name where the event was generated.
Usually mapped to macro __FILE__</documentation>
   </attribute>
   <attribute name="mLine" type="unsigned int const" visibility="0x00" properties="0x00">
    <documentation>Line of code in file where the event was generated.
Usually mapped to macro __LINE__</documentation>
   </attribute>
   <attribute name="mFunctionStr" type="char const * const" visibility="0x00" properties="0x00">
    <documentation>File string of the function name where the event was generated.
Usually mapped to macro __FUNCTION__</documentation>
   </attribute>
   <attribute name="mCategoryStr" type="char const * const" visibility="0x00" properties="0x00">
    <documentation>A string representing the category of the event.</documentation>
   </attribute>
   <attribute name="mMsg[1024]" type="char" visibility="0x00" properties="0x00">
    <documentation>Holder for the message string.</documentation>
   </attribute>
   <operation name="LogEntry" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aLogLevel" type="LogLevel const"/>
    <parameter name="aDate" type="Date const &amp;"/>
    <parameter name="aTime" type="Time const &amp;"/>
    <parameter name="aFileStr" type="char const * const"/>
    <parameter name="aLine" type="unsigned int const"/>
    <parameter name="aFunctionStr" type="char const * const"/>
    <parameter name="aCategoryStr" type="char const * const"/>
    <code>    : QP::QEvt(aSig)
    , mLogLevel(aLogLevel)
    , mDate(aDate)
    , mTime(aTime)
    , mFileStr(aFileStr)
    , mLine(aLine)
    , mFunctionStr(aFunctionStr)
    , mCategoryStr(aCategoryStr)
    , mMsg{0}

// Ctor body.</code>
   </operation>
   <operation name="~LogEntry" type="" visibility="0x02" properties="0x00">
    <documentation>Dtor.</documentation>
    <code>// Dtor body.</code>
   </operation>
  </class>
  <class name="Init" superclass="qpcpp::QEvt">
   <documentation>Dummy event for the pseudo init transition.</documentation>
   <attribute name="mCategories" type="std::unordered_set&lt;std::string&gt; const" visibility="0x00" properties="0x00">
    <documentation>The unordered set of categories being monitored by a Logger sink AO.</documentation>
   </attribute>
   <operation name="Init" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aCategories" type="std::unordered_set&lt;std::string&gt; const &amp;"/>
    <code>    : QP::QEvt(aSig)
    , mCategories(aCategories)

// Ctor body.</code>
   </operation>
   <operation name="~Init" type="" visibility="0x00" properties="0x00">
    <specifiers>= default</specifiers>
    <documentation>Dtor.</documentation>
   </operation>
  </class>
 </package>
 <directory name="../codegen">
  <file name="Logging_Events.h">
   <text>#pragma once

#include &lt;string&gt;
#include &lt;unordered_set&gt;

#include &quot;qpcpp.h&quot;

#include &quot;date/Date.h&quot;
#include &quot;time/Time.h&quot;

#include &quot;LogLevel.h&quot;


$declare${Logging::Events::LogEntry}
$declare${Logging::Events::Init}
</text>
  </file>
  <file name="Logging_AOs.cpp">
   <text>#include &quot;qpcpp.h&quot;

#include &quot;BSP.h&quot;
#include &quot;Signals.h&quot;

#include &quot;RTCC_Events.h&quot;
#include &quot;Logging_Events.h&quot;
#include &quot;Logging_AOs.h&quot;
#include &quot;LogLevel.h&quot;

$define${Logging::AOs::FileSink_AO}
</text>
  </file>
  <file name="Logging_AOs.h">
   <text>#pragma once

#include &quot;ff.h&quot;
#include &quot;LogLevel.h&quot;
#include &quot;Logging_Events.h&quot;

#include &lt;date/Date.h&gt;
#include &lt;time/Time.h&gt;

// Expansion of QM classes.
$declare${Logging::AOs::FileSink_AO}
</text>
  </file>
 </directory>
 <directory name="../inc">
  <file name="Logger.h" properties="external"/>
  <file name="Logger2.h" properties="external"/>
 </directory>
 <directory name="../src">
  <file name="Logger.cpp" properties="external"/>
  <file name="Logger2.cpp" properties="external"/>
 </directory>
</package>
