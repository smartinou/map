<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.1" links="0">
 <framework name="qpcpp"/>
 <package name="Events" stereotype="0x01">
  <class name="LogEvt" superclass="qpcpp::QEvt">
   <documentation>Event used to generate a log entry.</documentation>
   <attribute name="mSig" type="QP::QSignal" visibility="0x00" properties="0x00"/>
   <attribute name="mLogLevel" type="LogLevel_t" visibility="0x00" properties="0x00"/>
   <attribute name="mFileStr" type="char const * const" visibility="0x00" properties="0x00"/>
   <attribute name="mLine" type="unsigned int const" visibility="0x00" properties="0x00"/>
   <attribute name="mFunctionStr" type="char const * const" visibility="0x00" properties="0x00"/>
   <attribute name="mCategoryStr" type="char const * const" visibility="0x00" properties="0x00"/>
   <attribute name="mMsgStr" type="char const * const" visibility="0x00" properties="0x00"/>
   <operation name="LogEvt" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aLogLevel" type="LogLevel_t const"/>
    <parameter name="aFileStr" type="char const * const"/>
    <parameter name="aLine" type="unsigned int const"/>
    <parameter name="aFunctionStr" type="char const * const"/>
    <parameter name="aCategoryStr" type="char const * const"/>
    <parameter name="aMsgStr" type="char const * const"/>
    <code>  : QP::QEvt(aSig)
  , mLogLevel(aLogLevel)
  , mFileStr(aFileStr)
  , mLine(aLine)
  , mFunctionStr(aFunctionStr)
  , mCategoryStr(aCategoryStr)
  , mMsgStr(aMsgStr)

// Ctor body.</code>
   </operation>
   <operation name="~LogEvt" type="" visibility="0x02" properties="0x00">
    <documentation>Dtor.</documentation>
    <code>// Dtor body.</code>
   </operation>
  </class>
  <directory name="inc">
   <file name="LogEvt.h">
    <text>#pragma once

#include &quot;qpcpp.h&quot;

// Debug levels.
#define X_LOG_LEVELS         \
  _(PRI_DBG,  &quot;DEBUG&quot;)       \
  _(PRI_INFO, &quot;INFORMATION&quot;) \
  _(PRI_WARN, &quot;WARNING&quot;)     \
  _(PRI_ERR,  &quot;ERROR&quot;)       \
  _(PRI_CRIT, &quot;CRITICAL&quot;)    \
  _(PRI_DIS,  &quot;DISABLED&quot;)


#define _(enum, str) enum,
typedef enum {
  X_LOG_LEVELS
} LogLevel_t;
#undef _


namespace LogLevel {
char const *ToStr(LogLevel_t const aLevel);
} // namespace LogLevel

$declare(Events::LogEvt)
</text>
   </file>
  </directory>
  <directory name="src">
   <file name="LogEvt.cpp">
    <text>#include &quot;LogEvt.h&quot;


namespace LogLevel {

#define _(enum, str) case enum: return str;
char const *ToStr(LogLevel_t const aLevel) {
  switch (aLevel) {
    X_LOG_LEVELS
  }
  return &quot;&quot;;
}
#undef _
#undef X_LOG_LEVELS

} // namespace LogLevel


$define(Events::LogEvt)
</text>
   </file>
  </directory>
 </package>
 <package name="AOs" stereotype="0x02">
  <package file="./FileLogSink_AO.qmp"/>
  <directory name="inc">
   <file name="FileLogSink_AO.h">
    <text>#pragma once

#include &quot;ff.h&quot;
#include &quot;Logger.h&quot;

#include &lt;date/Date.h&gt;
#include &lt;time/Time.h&gt;

// Forward declarations.


// Expansion of QM classes.
$declare(AOs::FileLogSink_AO)
</text>
   </file>
  </directory>
  <directory name="src">
   <file name="FileLogSink_AO.cpp">
    <text>#include &quot;qpcpp.h&quot;

#include &quot;Logger.h&quot;
#include &quot;ff.h&quot;

#include &quot;BSP.h&quot;
#include &quot;Signals.h&quot;

#include &quot;RTCC_Events.h&quot;
#include &quot;FileLogSink_AO.h&quot;


$define(AOs::FileLogSink_AO)
</text>
   </file>
  </directory>
 </package>
 <directory name="inc">
  <file name="Logger.h" properties="external"/>
 </directory>
 <directory name="src">
  <file name="Logger.cpp" properties="external"/>
 </directory>
</model>
