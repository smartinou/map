<?xml version="1.0" encoding="UTF-8"?>
<package name="LwIP" stereotype="0x04" namespace="LwIP::">
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="Mgr_AO" superclass="qpcpp::QActive">
   <documentation>Main manager of the LwIP stack.</documentation>
   <attribute name="mSlowTickTimer" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>Slow tick timer for long period events.</documentation>
   </attribute>
   <attribute name="mTCPTimer?def LWIP_TCP" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Timer for TCP events.</documentation>
   </attribute>
   <attribute name="mARPTimer?def LWIP_ARP" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Timer for ARP events.</documentation>
   </attribute>
   <attribute name="mDHCPFineTimer?def LWIP_DHCP" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Timer for DHCP fine grain time events.</documentation>
   </attribute>
   <attribute name="mDHCPCoarseTimer?def LWIP_DHCP" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Timer for DHCP coarse grain time events.</documentation>
   </attribute>
   <attribute name="mAutoIPTimer?def LWIP_AUTOIP" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Auto IP event timer.</documentation>
   </attribute>
   <attribute name="mDNSTimer?def LWIP_DNS" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
    <documentation>Timer for DNS events.</documentation>
   </attribute>
   <operation name="Mgr_AO" type="" visibility="0x00" properties="0x00">
    <documentation>private ctor.</documentation>
    <code>    : QP::QActive(Q_STATE_CAST(&amp;LwIP::AO::Mgr_AO::initial))
    , mSlowTickTimer(this, LWIP_SLOW_TICK_SIG, 0U)
#ifdef LWIP_TCP
    , mTCPTimer()
#endif // LWIP_TCP
#ifdef LWIP_ARP
    , mARPTimer()
#endif // LWIP_ARP
#ifdef LWIP_DHCP
    , mDHCPFineTimer()
    , mDHCPCoarseTimer()
#endif // LWIP_DHCP
#ifdef LWIP_AUTOIP
    , mAutoIPTimer()
#endif // LWIP_AUTOIP

// Ctor body.</code>
   </operation>
   <operation name="Mgr_AO" type="" visibility="0x00" properties="0x00">
    <specifiers>= default</specifiers>
    <documentation>// Default copy Ctor (disabled).</documentation>
    <parameter name="" type="Mgr_AO const &amp;"/>
   </operation>
   <operation name="Mgr_AO" type="" visibility="0x00" properties="0x00">
    <specifiers>= default</specifiers>
    <parameter name="" type="Mgr_AO &amp;&amp;"/>
   </operation>
   <operation name="~Mgr_AO" type="" visibility="0x00" properties="0x00">
    <documentation>// Dtor.</documentation>
    <code>// What to do here?</code>
   </operation>
   <operation name="operator=" type="Mgr_AO &amp;" visibility="0x00" properties="0x02">
    <specifiers>= default</specifiers>
    <documentation>// Default assignment operator (disabled).</documentation>
    <parameter name="" type="Mgr_AO &amp;&amp;"/>
   </operation>
   <operation name="InitSNTP" type="void" visibility="0x02" properties="0x00">
    <documentation>Initialize SNTP.</documentation>
    <parameter name="aIPV4" type="ip_addr_t const * const"/>
    <code>// SNTP operating modes: default is to poll using unicast.
// The mode has to be set before calling sntp_init().
sntp_setoperatingmode(SNTP_OPMODE_POLL);
sntp_setserver(0, aIPV4);
sntp_init();
</code>
   </operation>
   <operation name="operator=" type="Mgr_AO &amp;" visibility="0x00" properties="0x00">
    <specifiers>= default</specifiers>
    <parameter name="" type="Mgr_AO const &amp;"/>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="Init">// Suppress the compiler warning about unused parameter.
bool     lUseDHCP    = false;
IPAddress lIPAddr;//     = 0x00000000;
IPAddress lSubnetMask;// = 0x00000000;
IPAddress lGWAddr;//     = 0x00000000;
void (*lCallbackInit)(void *) = nullptr;
void *lCallbackParam = nullptr;
if (nullptr != e) {
    LwIP::Event::Init const * const lInitEvt = static_cast&lt;LwIP::Event::Init const * const&gt;(e);
    lUseDHCP    = lInitEvt-&gt;mNetIFRec-&gt;UseDHCP();
    lIPAddr     = IPAddress(lInitEvt-&gt;mNetIFRec-&gt;GetIPAddr());
    lSubnetMask = IPAddress(lInitEvt-&gt;mNetIFRec-&gt;GetSubnetMask());
    lGWAddr     = IPAddress(lInitEvt-&gt;mNetIFRec-&gt;GetGWAddr());

    lCallbackInit = lInitEvt-&gt;mCallbackInit;
    lCallbackParam = lInitEvt-&gt;mCallbackParam;
}

// Initialize the lwIP stack.
lwip_init();

LwIPDrv::StaticInit(
    (QP::QActive *)this,
    lUseDHCP,
    lIPAddr,
    lSubnetMask,
    lGWAddr
);

// Initialize the lwIP applications...
if (nullptr != lCallbackInit) {
    lCallbackInit(lCallbackParam);
}
</action>
     <initial_glyph conn="4,4,5,0,6,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Running">
     <documentation>Main running state.</documentation>
     <entry brief="StartTimer(SlowTickTimer);">mSlowTickTimer.armX(
    (LWIP_SLOW_TICK_MS * BSP::TICKS_PER_SEC / 1000),
    (LWIP_SLOW_TICK_MS * BSP::TICKS_PER_SEC / 1000)
);</entry>
     <exit brief="StopTimer();">mSlowTickTimer.disarm();</exit>
     <tran trig="LWIP_RX_READY">
      <action brief="EtherDrv.Rd();">LwIP::Event::Interrupt const * const lEvent = static_cast&lt;LwIP::Event::Interrupt const * const&gt;(e);
LwIPDrv * const lEtherDrv = static_cast&lt;LwIPDrv * const&gt;(lEvent-&gt;mNetIF-&gt;state);
lEtherDrv-&gt;Rd();</action>
      <tran_glyph conn="4,20,3,-1,34">
       <action box="0,-2,28,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_TX_READY">
      <action brief="EtherDrv.Wr();">LwIP::Event::Interrupt const * const lEvent = static_cast&lt;LwIP::Event::Interrupt const * const&gt;(e);
LwIPDrv * const lEtherDrv = static_cast&lt;LwIPDrv * const&gt;(lEvent-&gt;mNetIF-&gt;state);
lEtherDrv-&gt;Wr();</action>
      <tran_glyph conn="4,24,3,-1,34">
       <action box="0,-2,24,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_SLOW_TICK">
      <action brief="ProcTimers();">#if LWIP_TCP
    mTCPTimer += LWIP_SLOW_TICK_MS;
    if (mTCPTimer &gt;= TCP_TMR_INTERVAL) {
        mTCPTimer = 0;
        tcp_tmr();
    }
#endif
#if LWIP_ARP
    mARPTimer += LWIP_SLOW_TICK_MS;
    if (mARPTimer &gt;= ARP_TMR_INTERVAL) {
        mARPTimer = 0;
        etharp_tmr();
    }
#endif
#if LWIP_DHCP
    mDHCPFineTimer += LWIP_SLOW_TICK_MS;
    if (mDHCPFineTimer &gt;= DHCP_FINE_TIMER_MSECS) {
        mDHCPFineTimer = 0;
        dhcp_fine_tmr();
    }
    mDHCPCoarseTimer += LWIP_SLOW_TICK_MS;
    if (mDHCPCoarseTimer &gt;= DHCP_COARSE_TIMER_MSECS) {
        mDHCPCoarseTimer = 0;
        dhcp_coarse_tmr();
    }
#endif
#if LWIP_AUTOIP
    mAutoIPTimer += LWIP_SLOW_TICK_MS;
    if (mAutoIPTimer &gt;= AUTOIP_TMR_INTERVAL) {
        mAutoIPTimer = 0;
        autoip_tmr();
    }
#endif
#if LWIP_DNS
    mDNSTimer += LWIP_SLOW_TICK_MS;
    if (mDNSTimer &gt;= DNS_TMR_INTERVAL) {
        mDNSTimer = 0;
        dns_tmr();
    }
#endif</action>
      <tran_glyph conn="4,28,3,-1,34">
       <action box="0,-2,36,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_RX_OVERRUN">
      <action brief="Stats(err);">LINK_STATS_INC(link.err);</action>
      <tran_glyph conn="4,32,3,-1,34">
       <action box="0,-2,34,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <action brief="Stop();">// Requires QF_ACTIVE_STOP to be defined.
stop();</action>
      <tran_glyph conn="36,10,0,-1,-6,6">
       <action box="0,-8,11,4"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_HOST_NAME_FOUND">
      <action brief="StartNTP();">// The host name to solve is an NTP server.
LwIP::Event::HostNameFound const * const lEvent = static_cast&lt;LwIP::Event::HostNameFound const * const&gt;(e);

// SNTP operating modes: default is to poll using unicast.
// The mode has to be set before calling sntp_init().
InitSNTP(&amp;lEvent-&gt;mIPV4);
</action>
      <tran_glyph conn="4,36,3,-1,34">
       <action box="0,-2,34,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_NETIF_CHANGED">
      <action brief="CheckStatus();">// Must inspect netif flags and IP address to determine the new state.
LwIP::Event::NetStatusChanged const * const lEvent = static_cast&lt;LwIP::Event::NetStatusChanged const * const&gt;(e);
LwIPDrv * const lEtherDrv = static_cast&lt;LwIPDrv * const&gt;(lEvent-&gt;mNetIF-&gt;state);
</action>
      <choice>
       <guard brief="NefIFUp==true">// Check if the netif is up.
lEvent-&gt;mIsUp</guard>
       <action brief="NetIFUp();">// Bring the network up 1st, THEN enable the interrupts.
netif_set_up(lEvent-&gt;mNetIF);
lEtherDrv-&gt;StartIPCfg();

if (netif_is_link_up(lEvent-&gt;mNetIF)) {
    lEtherDrv-&gt;EnableAllInt();
}

#if LWIP_DNS
    // Get the IP address of the NTP server:
    // -time.nrc.ca
    // -time.chu.nrc.ca
    static const char *sNTPServer = &quot;time.nrc.ca&quot;;
    ip_addr_t lIPAddr;
    err_t lErr = dns_gethostbyname(
        sNTPServer,
        &amp;lIPAddr,
        LwIPDrv::DNSFoundCallback,
        static_cast&lt;void *&gt;(lEtherDrv)
    );

    // Since the name is resolved after acquiring 1st IP address,
    // we don't expect it to be solved right away.
    // But just in case the network IF was restarted and it still in cache.
    if (lErr == ERR_OK) {
        InitSNTP(&amp;lIPAddr);
    }
#endif // LWIP_DNS

</action>
       <choice_glyph conn="38,40,4,-1,2,-30">
        <action box="-30,0,28,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="else"/>
       <action brief="NetIFDown();">// Disable the interrupts, THEN bring the network down.
lEtherDrv-&gt;DisableAllInt();
netif_set_down(lEvent-&gt;mNetIF);</action>
       <choice_glyph conn="38,40,4,-1,4,-30">
        <action box="-30,2,16,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,40,3,-1,34">
       <action box="0,-2,34,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_LINK_CHANGED">
      <action brief="CheckStatus();">// Must inspect netif flags and IP address to determine the new state.
LwIP::Event::NetStatusChanged const * const lEvent = static_cast&lt;LwIP::Event::NetStatusChanged const * const&gt;(e);
LwIPDrv * const lEtherDrv = static_cast&lt;LwIPDrv * const&gt;(lEvent-&gt;mNetIF-&gt;state);
</action>
      <choice>
       <guard brief="LinkUp==true">// Check if the link is up.
lEvent-&gt;mIsUp</guard>
       <action brief="LinkUp();">// Bring the link up 1st, THEN enable the interrupts.
netif_set_link_up(lEvent-&gt;mNetIF);
if (netif_is_up(lEvent-&gt;mNetIF)) {
    lEtherDrv-&gt;EnableAllInt();
}
</action>
       <choice_glyph conn="38,48,4,-1,2,-30">
        <action box="-30,0,24,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard brief="else"/>
       <action brief="LinkDown();">// Disable the interrupts, THEN bring the link down.
lEtherDrv-&gt;DisableAllInt();
netif_set_link_down(lEvent-&gt;mNetIF);</action>
       <choice_glyph conn="38,48,4,-1,4,-30">
        <action box="-30,2,18,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,48,3,-1,34">
       <action box="0,-2,31,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_PHY_INT">
      <action brief="PHYISR();">LwIP::Event::Interrupt const * const lEvent = static_cast&lt;LwIP::Event::Interrupt const * const&gt;(e);
LwIPDrv * const lEtherDrv = static_cast&lt;LwIPDrv * const&gt;(lEvent-&gt;mNetIF-&gt;state);
lEtherDrv-&gt;PHYISR();</action>
      <tran_glyph conn="4,56,3,-1,34">
       <action box="0,-2,30,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,10,38,50">
      <entry box="1,2,23,2"/>
      <exit box="1,4,16,2"/>
     </state_glyph>
    </state>
    <state_diagram size="46,64"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::">
  <class name="Init" superclass="qpcpp::QEvt">
   <documentation>Init event.</documentation>
   <attribute name="mNetIFRec" type="std::shared_ptr&lt;NetIFRec&gt; const" visibility="0x00" properties="0x00">
    <documentation>Pointer to Net IF record.</documentation>
   </attribute>
   <attribute name=" (*const mCallbackInit)(void * const)" type="void" visibility="0x00" properties="0x00">
    <documentation>A callback function to set other network stack features.</documentation>
   </attribute>
   <attribute name="mCallbackParam" type="void *" visibility="0x00" properties="0x00">
    <documentation>A pointer to parameter to pass to callback function.</documentation>
   </attribute>
   <operation name="Init" type="" visibility="0x00" properties="0x02">
    <documentation>// Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aNetIFRec" type="std::shared_ptr&lt;NetIFRec&gt; const &amp;"/>
    <parameter name="(*const aCallbackInit)(void *)" type="void"/>
    <parameter name="aCallbackParam" type="void *"/>
    <code>    : QP::QEvt(aSig)
    , mNetIFRec(aNetIFRec)
    , mCallbackInit(aCallbackInit)
    , mCallbackParam(aCallbackParam)

// Ctor body.</code>
   </operation>
  </class>
  <class name="IPAddressChanged" superclass="qpcpp::QEvt">
   <documentation>IP Address changed.</documentation>
   <attribute name="mIPAddress" type="IPAddress" visibility="0x00" properties="0x00">
    <documentation>IP Address.</documentation>
   </attribute>
   <attribute name="mSubnetMask" type="IPAddress" visibility="0x00" properties="0x00">
    <documentation>Subnet mask.</documentation>
   </attribute>
   <attribute name="mDefaultGW" type="IPAddress" visibility="0x00" properties="0x00">
    <documentation>Default gateway.</documentation>
   </attribute>
   <operation name="IPAddressChanged" type="" visibility="0x00" properties="0x02">
    <documentation>Event to signal that any field of the IP address changed from previous address.</documentation>
    <parameter name="aSig" type="QP::QSignal"/>
    <parameter name="aIPAddress" type="IPAddress const &amp;"/>
    <parameter name="aSubnetMask" type="IPAddress const &amp;"/>
    <parameter name="aDefaultGW" type="IPAddress const &amp;"/>
    <code>    : QP::QEvt(aSig)
    , mIPAddress(aIPAddress)
    , mSubnetMask(aSubnetMask)
    , mDefaultGW(aDefaultGW)

// Ctor body.</code>
   </operation>
  </class>
  <class name="Interruptx" superclass="qpcpp::QEvt">
   <documentation>Event raised with corresponding interrupt in ethernet driver.</documentation>
   <attribute name="mIndex" type="unsigned int const" visibility="0x00" properties="0x00">
    <documentation>0-based index of the network interface that this event belongs to.</documentation>
   </attribute>
   <operation name="Interruptx" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aIndex" type="unsigned int const"/>
    <code>    : QP::QEvt(aSig)
    , mIndex(aIndex)
</code>
   </operation>
  </class>
  <class name="HostNameFound" superclass="qpcpp::QEvt">
   <documentation>Host name is found by DNS server.</documentation>
   <attribute name="mName" type="std::string" visibility="0x00" properties="0x00">
    <documentation>The name that was looked up.</documentation>
   </attribute>
   <attribute name="mIPV4" type="ip_addr_t" visibility="0x00" properties="0x00">
    <documentation>Pointer to an ip_addr_t containing the IP address of the hostname, or NULL if the name could not be found (or on any other error).</documentation>
   </attribute>
   <operation name="HostNameFound" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aName" type="const char * const"/>
    <parameter name="aIPV4" type="const ip_addr_t * const"/>
    <code>    : QP::QEvt(aSig)
    //, mIndex(aIndex)
    , mName(aName)
    , mIPV4()

// Assign IP address.
ip_addr_copy(mIPV4, *aIPV4);</code>
   </operation>
  </class>
  <class name="SystemTimeUpdate" superclass="qpcpp::QEvt">
   <documentation>SNTP returned a new system time.</documentation>
   <attribute name="mSystemTime" type="time_t" visibility="0x00" properties="0x00">
    <documentation>The new system time.</documentation>
   </attribute>
   <operation name="SystemTimeUpdate" type="" visibility="0x00" properties="0x02">
    <documentation>// Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aSystemTime" type="time_t"/>
    <code>    : QP::QEvt(aSig)
    , mSystemTime(aSystemTime)
</code>
   </operation>
  </class>
  <class name="NetStatusChanged" superclass="qpcpp::QEvt">
   <documentation>Generic event for network status changes. Could be used for:
*Network interface state changed.
*Network link state changed.</documentation>
   <attribute name="mNetIF" type="struct netif * const" visibility="0x00" properties="0x00">
    <documentation>Pointer to the struct netif that triggered the event.</documentation>
   </attribute>
   <attribute name="mIsUp" type="bool" visibility="0x00" properties="0x00">
    <documentation>True if net link is up.</documentation>
   </attribute>
   <operation name="NetStatusChanged" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aNetIF" type="struct netif * const"/>
    <parameter name="aIsUp" type="bool"/>
    <code>    : QP::QEvt(aSig)
    , mNetIF(aNetIF)
    , mIsUp(aIsUp)</code>
   </operation>
  </class>
  <class name="Interrupt" superclass="qpcpp::QEvt">
   <documentation>PHY interrupt event.</documentation>
   <attribute name="mNetIF" type="struct netif * const" visibility="0x00" properties="0x00">
    <documentation>Pointer to the struct netif that triggered the event.</documentation>
   </attribute>
   <operation name="Interrupt" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSig" type="QP::QSignal const"/>
    <parameter name="aNetIF" type="struct netif * const"/>
    <code>    : QP::QEvt(aSig)
//    , mEthDrv(aEthDrv)
    , mNetIF(aNetIF)
</code>
   </operation>
  </class>
 </package>
 <directory name="../codegen">
  <file name="LwIP_AOs.h">
   <text>#pragma once

// LwIP stack.
#include &quot;lwip/ip_addr.h&quot;

// Forward declaration.
class LwIPDrv;


$declare${LwIP::AOs::Mgr_AO}
</text>
  </file>
  <file name="LwIP_AOs.cpp">
   <text>#define LWIP_ALLOWED

// Standard Libraries.
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

// QP-port.
#include &quot;qpcpp.h&quot;

// LwIP stack.
#include &quot;lwip/autoip.h&quot;
#include &quot;lwip/def.h&quot;
#include &quot;lwip/dhcp.h&quot;
#include &quot;lwip/dns.h&quot;
#include &quot;lwip/init.h&quot;
#include &quot;lwip/stats.h&quot;
#include &quot;lwip/priv/tcp_priv.h&quot;

// lwIP application.
#ifdef __cplusplus
extern &quot;C&quot; {
} // extern &quot;C&quot;
#include &quot;LwIPDrv.h&quot;
#endif // __cplusplus


// Common libraries.
#include &lt;db/NetIFRec.h&gt;

// This project.
#include &quot;BSP.h&quot;
#include &quot;Logger.h&quot;
#include &quot;LwIP_AOs.h&quot;
#include &quot;LwIP_Events.h&quot;
#include &quot;Signals.h&quot;

// Has to be common divider to the intervals to be serviced in the stack.
// ARP is 100ms, fast TCP is 250ms: using 50ms.
#define LWIP_SLOW_TICK_MS (50)


$define${LwIP::AOs::Mgr_AO}</text>
  </file>
  <file name="LwIP_Events.h">
   <text>#pragma once

#include &lt;memory&gt;
#include &lt;string&gt;

#include &quot;lwip/apps/sntp.h&quot;

#include &quot;net/IPAddress.h&quot;

// Forward declaration
class NetIFRec;


$declare${LwIP::Events::Init}
$declare${LwIP::Events::IPAddressChanged}
$declare${LwIP::Events::Interrupt}
$declare${LwIP::Events::HostNameFound}
$declare${LwIP::Events::SystemTimeUpdate}
$declare${LwIP::Events::NetStatusChanged}
</text>
  </file>
 </directory>
</package>
