//$file${Logging::inc::Logger.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: PFPP.qm
// File:  ${Logging::inc::Logger.h}
//
// This code has been generated by QM 4.5.1 (https://www.state-machine.com/qm).
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...###".."$end...###".
// All your changes in these sections will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//$endhead${Logging::inc::Logger.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#pragma once
// *******************************************************************************
//
// Project: Logging.
//
// Module: Logger.
//
// *******************************************************************************

//! \file
//! \brief Logger class.
//! \ingroup qp_ao

// ******************************************************************************
//
//        Copyright (c) 2018-2019, Pleora Technologies, All rights reserved.
//
// ******************************************************************************

// ******************************************************************************
//                              INCLUDE FILES
// ******************************************************************************

#include <cstddef>
#include <string>

#include "Logging_Events.h"

// ******************************************************************************
//                       DEFINED CONSTANTS AND MACROS
// ******************************************************************************

#define LOGGER (Logger::Instance())

// TODO: Verify that release builds with gcc define NDEBUG.
#if defined(_DEBUG) || !defined(NDEBUG)
#define LOG_DEBUG(aCategory, ...); \
{                                  \
    LOGGER.Log(                    \
        PRI_DBG,                   \
        __FILE__,                  \
        __LINE__,                  \
        __FUNCTION__,              \
        aCategory,                 \
        __VA_ARGS__                \
    );                             \
}
#else
#define LOG_DEBUG(aCategory, ...)
#endif

#define LOG_INFO(aCategory, ...); \
{                                 \
    LOGGER.Log(                   \
        PRI_INFO,                 \
        __FILE__,                 \
        __LINE__,                 \
        __FUNCTION__,             \
        aCategory,                \
        __VA_ARGS__               \
    );                            \
}

#define LOG_WARNING(aCategory, ...); \
{                                    \
    LOGGER.Log(                      \
        PRI_WARN,                    \
        __FILE__,                    \
        __LINE__,                    \
        __FUNCTION__,                \
        aCategory,                   \
        __VA_ARGS__                  \
    );                               \
}

#define LOG_ERROR(aCategory, ...); \
{                                  \
    LOGGER.Log(                    \
        PRI_ERR,                   \
        __FILE__,                  \
        __LINE__,                  \
        __FUNCTION__,              \
        aCategory,                 \
        __VA_ARGS__                \
    );                             \
}

#define LOG_CRITICAL(aCategory, ...); \
{                                     \
    LOGGER.Log(                       \
        PRI_CRIT,                     \
        __FILE__,                     \
        __LINE__,                     \
        __FUNCTION__,                 \
        aCategory,                    \
        __VA_ARGS__                   \
    );                                \
}

// ******************************************************************************
//                         TYPEDEFS AND STRUCTURES
// ******************************************************************************

//! \brief Log generation class.
class Logger {
public:
    static Logger &Instance();

    LogLevel_t GetLogLevel(void) const;
    LogLevel_t GetLogLevel(char const * const aCategoryStr) const;
    unsigned int GetEvtSignal(char const * const aCategoryStr) const;

    void SetLogLevel(LogLevel_t const aLevel);
    bool AddCategory(
        unsigned int const aEvtSignal,
        char const * const aCategoryStr,
        LogLevel_t   const aLevel = PRI_ERR
    );

    bool Log(
        LogLevel_t   const aLevel,
        char const * const aFileStr,
        unsigned int const aLine,
        char const * const aFunctionStr,
        char const * const aCategoryStr,
        char const * const aFormatStr,
        ...
    );

    void AddSink(QP::QActive * const aAO, char const * const aCategoryStr);

private:
    // Disable default constructor/copy/assign
    Logger();
    Logger(Logger const&);
    virtual ~Logger();
    void operator=(Logger const&);
    void *operator new(size_t aSize){ return &(Instance()); }
    void  operator delete(void *aLogger) {}

    static int CompareStr(void const * const aFirstStr, void const * const aSecondStr);

    static unsigned int constexpr sMaxLogCategories  = 32;
    static unsigned int constexpr sMaxLogCategoryLen = 32;
    static LogLevel_t   constexpr sInvalidCategory = static_cast<LogLevel_t>(-1);
    static unsigned int constexpr sMsgBufLen = 1024;

    typedef struct {
        unsigned int mEvtSignal;
        char         mName[sMaxLogCategoryLen];
        LogLevel_t   mLevel;
    } LogCategory_t;

    LogCategory_t *FindCategory(char const * const aCategoryStr) const;

    static LogCategory_t mCategories[sMaxLogCategories];
    static size_t        mCategoryQty;

    LogLevel_t mLogLevel;
};

// ******************************************************************************
//                            EXPORTED VARIABLES
// ******************************************************************************

// ******************************************************************************
//                                 EXTERNS
// ******************************************************************************

// ******************************************************************************
//                            EXPORTED FUNCTIONS
// ******************************************************************************

// ******************************************************************************
//                                END OF FILE
// ******************************************************************************
