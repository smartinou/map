//.$file${Logging::../inc::Logger2.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: PFPP.qm
// File:  ${Logging::../inc::Logger2.h}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
// All your changes in these sections will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${Logging::../inc::Logger2.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#pragma once
// *******************************************************************************
//
// Project: Logging.
//
// Module: Logger::
//
// *******************************************************************************

//! \file
//! \brief Logger class.
//! \ingroup qp_ao

// ******************************************************************************
//
//        Copyright (c) 2018-2021, Pleora Technologies, All rights reserved.
//
// ******************************************************************************

// ******************************************************************************
//                              INCLUDE FILES
// ******************************************************************************

#include <qpcpp.h>

#include "LogLevel.h"
#include "Logging_Events.h"

// ******************************************************************************
//                       DEFINED CONSTANTS AND MACROS
// ******************************************************************************

#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)

// TODO: Verify that release builds with gcc define NDEBUG.
#if defined(_DEBUG) || !defined(NDEBUG)
#define LOG_DEBUG(aCategory, aDate, aTime, ...); \
{                                  \
    Logger::Log(                   \
        LogLevel::prio::DEBUG,     \
        aDate,                     \
        aTime,                     \
        __FILE__,                  \
        __LINE__,                  \
        __FUNCTION__,              \
        aCategory,                 \
        __VA_ARGS__                \
    );                             \
}
#else
#define LOG_DEBUG(aCategory, aDate, aTime, ...)
#endif

#define LOG_INFO(aCategory, aDate, aTime, ...); \
{                                 \
    Logger::Log(                  \
        LogLevel::prio::INFO,     \
        aDate,                    \
        aTime,                    \
        __FILENAME__,             \
        __LINE__,                 \
        __FUNCTION__,             \
        aCategory,                \
        __VA_ARGS__               \
    );                            \
}

#define LOG_WARNING(aCategory, aDate, aTime, ...); \
{                                    \
    Logger::Log(                     \
        LogLevel::prio::WARNING,     \
        aDate,                       \
        aTime,                       \
        __FILE__,                    \
        __LINE__,                    \
        __FUNCTION__,                \
        aCategory,                   \
        __VA_ARGS__                  \
    );                               \
}

#define LOG_ERROR(aCategory, aDate, aTime, ...); \
{                                  \
    Logger::Log(                   \
        LogLevel::prio::ERR,       \
        aDate,                     \
        aTime,                     \
        __FILE__,                  \
        __LINE__,                  \
        __FUNCTION__,              \
        aCategory,                 \
        __VA_ARGS__                \
    );                             \
}

#define LOG_CRITICAL(aCategory, aDate, aTime, ...); \
{                                     \
    Logger::Log(                      \
        PRI_CRIT,                     \
        aDate,                        \
        aTime,                        \
        __FILE__,                     \
        __LINE__,                     \
        __FUNCTION__,                 \
        aCategory,                    \
        __VA_ARGS__                   \
    );                                \
}

// ******************************************************************************
//                         TYPEDEFS AND STRUCTURES
// ******************************************************************************

// ******************************************************************************
//                            EXPORTED VARIABLES
// ******************************************************************************

// ******************************************************************************
//                                 EXTERNS
// ******************************************************************************

// ******************************************************************************
//                            EXPORTED FUNCTIONS
// ******************************************************************************

namespace Logger {


bool AddCategory(
    char const * const aCategoryStr,
    unsigned int const aEventSignal,
    LogLevel::prio const aMaxLevel = LogLevel::prio::ERROR
);
LogLevel GetMaxLevel(char const * const aCategoryStr);
unsigned int GetEventSignal(char const * const aCategoryName);

bool Log(
    LogLevel const aLevel,
    Date const &aDate,
    Time const &aTime,
    char const * const aFileStr,
    unsigned int const aLine,
    char const * const aFunctionStr,
    char const * const aCategoryStr,
    char const * const aFormatStr,
    ...
);

void AddSink(char const * const aCategoryStr, QP::QActive * const aAO);

} // Logger

// ******************************************************************************
//                                END OF FILE
// ******************************************************************************
