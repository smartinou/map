// *****************************************************************************
//
// Project: <Larger project scope.>
//
// Module: <Module in the larger project scope.>
//
// *****************************************************************************

//! \file
//! \brief MyClass device class.
//! \ingroup module_group

// *****************************************************************************
//
//        Copyright (c) 2015-2016, Martin Garon, All rights reserved.
//
// *****************************************************************************

// *****************************************************************************
//                              INCLUDE FILES
// *****************************************************************************

#include "Limit.h"

// *****************************************************************************
//                      DEFINED CONSTANTS AND MACROS
// *****************************************************************************

// *****************************************************************************
//                         TYPEDEFS AND STRUCTURES
// *****************************************************************************

// *****************************************************************************
//                            FUNCTION PROTOTYPES
// *****************************************************************************

// *****************************************************************************
//                             GLOBAL VARIABLES
// *****************************************************************************

// *****************************************************************************
//                            EXPORTED FUNCTIONS
// *****************************************************************************

Limit::Limit(unsigned int aLowerLimit, unsigned int aUpperLimit, unsigned int aVal)
    : mLowerLimit(aLowerLimit),
    mUpperLimit(aUpperLimit),
    mVal(aVal) {

  Set(aVal);
}


void Limit::Set(unsigned int aVal) {

  mVal = aVal;
  if (mVal < mLowerLimit) {
    mVal = mLowerLimit;
  } else if (mUpperLimit < mVal) {
    mVal = mUpperLimit;
  }    
}

// *****************************************************************************
//                              LOCAL FUNCTIONS
// *****************************************************************************

// *****************************************************************************
//                                END OF FILE
// *****************************************************************************
